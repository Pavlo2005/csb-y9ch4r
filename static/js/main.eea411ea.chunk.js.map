{"version":3,"sources":["redux/tasks/operations.js","components/Navigation/Navigation.module.css","components/UserMenu/UserMenu.module.css","components/AuthNav/AuthNav.module.css","components/AppBar/AppBar.module.css","redux/auth/operations.js","redux/auth/selectors.js","hooks/useAuth.js","components/Navigation/Navigation.js","components/UserMenu/UserMenu.js","components/AuthNav/AuthNav.js","components/AppBar/AppBar.js","components/Layout.js","components/PrivateRoute.js","components/RestrictedRoute.js","components/App.js","redux/tasks/slice.js","redux/auth/slice.js","redux/store.js","index.js"],"names":["fetchTasks","createAsyncThunk","async","_","thunkAPI","axios","get","data","error","rejectWithValue","message","addTask","text","post","e","deleteTask","taskId","delete","concat","module","exports","defaults","baseURL","setAuthHeader","token","headers","common","Authorization","register","credentials","res","logIn","logOut","refreshUser","persistedToken","getState","auth","selectIsLoggedIn","state","isLoggedIn","selectUser","user","selectIsRefreshing","isRefreshing","useAuth","useSelector","Navigation","_jsxs","children","_jsx","NavLink","className","css","link","to","UserMenu","dispatch","useDispatch","wrapper","username","name","type","onClick","AuthNav","AppBar","header","Layout","style","maxWidth","margin","padding","Suspense","fallback","Outlet","Toaster","position","reverseOrder","PrivateRoute","_ref","component","Component","redirectTo","Navigate","RestrictedRoute","HomePage","lazy","RegisterPage","LoginPage","TasksPage","App","useEffect","Routes","Route","path","element","index","handlePending","isLoading","handleRejected","action","payload","tasksReducer","createSlice","initialState","items","extraReducers","pending","rejected","fulfilled","push","findIndex","task","id","splice","reducer","authReducer","email","authPersistConfig","key","storage","whitelist","store","configureStore","persistReducer","tasks","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","ReactDOM","createRoot","document","getElementById","render","React","StrictMode","Provider","PersistGate","loading","BrowserRouter"],"mappings":"qKAAA,kIAIO,MAAMA,EAAaC,YACxB,kBACAC,MAAOC,EAAGC,KACR,IAEE,aADkBC,IAAMC,IAAI,WACjBC,IACb,CAAE,MAAOC,GACP,OAAOJ,EAASK,gBAAgBD,EAAME,QACxC,KAKSC,EAAUV,YACrB,iBACAC,MAAOU,EAAMR,KACX,IAEE,aADuBC,IAAMQ,KAAK,SAAU,CAAED,UAC9BL,IAClB,CAAE,MAAOO,GACP,OAAOV,EAASK,gBAAgBK,EAAEJ,QACpC,KAKSK,EAAad,YACxB,oBACAC,MAAOc,EAAQZ,KACb,IAEE,aADuBC,IAAMY,OAAO,UAADC,OAAWF,KAC9BT,IAClB,CAAE,MAAOO,GACP,OAAOV,EAASK,gBAAgBK,EAAEJ,QACpC,I,qBCrCJS,EAAOC,QAAU,CAAC,KAAO,yBAAyB,OAAS,2B,qBCA3DD,EAAOC,QAAU,CAAC,QAAU,0BAA0B,SAAW,2B,qBCAjED,EAAOC,QAAU,CAAC,KAAO,sBAAsB,OAAS,wB,qBCAxDD,EAAOC,QAAU,CAAC,OAAS,uB,iCCD3B,oKAGAf,IAAMgB,SAASC,QAAU,2CAGzB,MAAMC,EAAgBC,IACpBnB,IAAMgB,SAASI,QAAQC,OAAOC,cAAa,UAAAT,OAAaM,EAAO,EAYpDI,EAAW3B,YACtB,iBACAC,MAAO2B,EAAazB,KAClB,IACE,MAAM0B,QAAYzB,IAAMQ,KAAK,gBAAiBgB,GAG9C,OADAN,EAAcO,EAAIvB,KAAKiB,OAChBM,EAAIvB,IACb,CAAE,MAAOC,GACP,OAAOJ,EAASK,gBAAgBD,EAAME,QACxC,KAQSqB,EAAQ9B,YACnB,cACAC,MAAO2B,EAAazB,KAClB,IACE,MAAM0B,QAAYzB,IAAMQ,KAAK,eAAgBgB,GAG7C,OADAN,EAAcO,EAAIvB,KAAKiB,OAChBM,EAAIvB,IACb,CAAE,MAAOC,GACP,OAAOJ,EAASK,gBAAgBD,EAAME,QACxC,KAQSsB,EAAS/B,YAAiB,eAAeC,MAAOC,EAAGC,KAC9D,UACQC,IAAMQ,KAAK,iBA7CnBR,IAAMgB,SAASI,QAAQC,OAAOC,cAAgB,EAgD9C,CAAE,MAAOnB,GACP,OAAOJ,EAASK,gBAAgBD,EAAME,QACxC,KAOWuB,EAAchC,YACzB,gBACAC,MAAOC,EAAGC,KAER,MACM8B,EADQ9B,EAAS+B,WACMC,KAAKZ,MAElC,GAAuB,OAAnBU,EAEF,OAAO9B,EAASK,gBAAgB,wBAGlC,IAEEc,EAAcW,GAEd,aADkB7B,IAAMC,IAAI,cACjBC,IACb,CAAE,MAAOC,GACP,OAAOJ,EAASK,gBAAgBD,EAAME,QACxC,I,iICxFG,MAAM2B,EAAmBC,GAASA,EAAMF,KAAKG,WAEvCC,EAAaF,GAASA,EAAMF,KAAKK,KAEjCC,EAAqBJ,GAASA,EAAMF,KAAKO,aCGzCC,EAAUA,KAKd,CACLL,WALiBM,YAAYR,GAM7BM,aALmBE,YAAYH,GAM/BD,KALWI,YAAYL,K,4BCNpB,MAAMM,EAAaA,KACxB,MAAM,WAAEP,GAAeK,IAEvB,OACEG,eAAA,OAAAC,SAAA,CACEC,cAACC,IAAO,CAACC,UAAWC,IAAIC,KAAMC,GAAG,IAAGN,SAAC,SAGpCT,GACCU,cAACC,IAAO,CAACC,UAAWC,IAAIC,KAAMC,GAAG,SAAQN,SAAC,YAIxC,E,4BCZH,MAAMO,EAAWA,KACtB,MAAMC,EAAWC,eACX,KAAEhB,GAASG,IAEjB,OACEG,eAAA,OAAKI,UAAWC,IAAIM,QAAQV,SAAA,CAC1BD,eAAA,KAAGI,UAAWC,IAAIO,SAASX,SAAA,CAAC,YAAUP,EAAKmB,QAC3CX,cAAA,UAAQY,KAAK,SAASC,QAASA,IAAMN,EAASxB,eAAUgB,SAAC,aAGrD,E,qBCZH,MAAMe,EAAUA,IAEnBhB,eAAA,OAAAC,SAAA,CACEC,cAACC,IAAO,CAACC,UAAWC,IAAIC,KAAMC,GAAG,YAAWN,SAAC,aAG7CC,cAACC,IAAO,CAACC,UAAWC,IAAIC,KAAMC,GAAG,SAAQN,SAAC,c,qBCHzC,MAAMgB,EAASA,KACpB,MAAM,WAAEzB,GAAeK,IAEvB,OACEG,eAAA,UAAQI,UAAWC,IAAIa,OAAOjB,SAAA,CAC5BC,cAACH,EAAU,IACVP,EAAaU,cAACM,EAAQ,IAAMN,cAACc,EAAO,MAC9B,ECRAG,EAASA,IAElBnB,eAAA,OAAKoB,MAAO,CAAEC,SAAU,IAAKC,OAAQ,SAAUC,QAAS,UAAWtB,SAAA,CACjEC,cAACe,EAAM,IACPf,cAACsB,WAAQ,CAACC,SAAU,KAAKxB,SACvBC,cAACwB,IAAM,MAETxB,cAACyB,UAAO,CAACC,SAAS,YAAYC,cAAc,OCJrCC,EAAeC,IAAiD,IAA9CC,UAAWC,EAAS,WAAEC,EAAa,KAAKH,EACrE,MAAM,WAAEvC,EAAU,aAAEI,GAAiBC,IAGrC,OAFwBL,IAAeI,EAEfM,cAACiC,IAAQ,CAAC5B,GAAI2B,IAAiBD,CAAS,ECJrDG,EAAkBL,IAAiD,IAA9CC,UAAWC,EAAS,WAAEC,EAAa,KAAKH,EACxE,MAAM,WAAEvC,GAAeK,IAEvB,OAAOL,EAAaU,cAACiC,IAAQ,CAAC5B,GAAI2B,IAAiBD,CAAS,ECFxDI,EAAWC,gBAAK,IAAM,+BACtBC,EAAeD,gBAAK,IAAM,qDAC1BE,EAAYF,gBAAK,IAAM,qDACvBG,EAAYH,gBAAK,IAAM,qDAyBhBI,EAAMA,KACjB,MAAMjC,EAAWC,eACX,aAAEd,GAAiBC,IAMzB,OAJA8C,qBAAU,KACRlC,EAASvB,cAAc,GACtB,CAACuB,IAEGb,EACLM,cAAA,KAAAD,SAAG,uBAEHC,cAAC0C,IAAM,CAAA3C,SACLD,eAAC6C,IAAK,CAACC,KAAK,IAAIC,QAAS7C,cAACiB,EAAM,IAAIlB,SAAA,CAClCC,cAAC2C,IAAK,CAACG,OAAK,EAACD,QAAS7C,cAACmC,EAAQ,MAC/BnC,cAAC2C,IAAK,CACJC,KAAK,YACLC,QACE7C,cAACkC,EAAe,CAACF,WAAW,SAASF,UAAW9B,cAACqC,EAAY,QAGjErC,cAAC2C,IAAK,CACJC,KAAK,SACLC,QACE7C,cAACkC,EAAe,CAACF,WAAW,SAASF,UAAW9B,cAACsC,EAAS,QAG9DtC,cAAC2C,IAAK,CACJC,KAAK,SACLC,QACE7C,cAAC4B,EAAY,CAACI,WAAW,SAASF,UAAW9B,cAACuC,EAAS,YAKhE,E,oDCnEH,MAAMQ,EAAgB1D,IACpBA,EAAM2D,WAAY,CAAI,EAGlBC,EAAiBA,CAAC5D,EAAO6D,KAC7B7D,EAAM2D,WAAY,EAClB3D,EAAM9B,MAAQ2F,EAAOC,OAAO,EA2CjBC,EAxCMC,YAAY,CAC7B1C,KAAM,QACN2C,aAAc,CACZC,MAAO,GACPP,WAAW,EACXzF,MAAO,MAETiG,cAAe,CACb,CAACzG,IAAW0G,SAAUV,EACtB,CAACrF,IAAQ+F,SAAUV,EACnB,CAACjF,IAAW2F,SAAUV,EACtB,CAAChG,IAAW2G,UAAWT,EACvB,CAACvF,IAAQgG,UAAWT,EACpB,CAACnF,IAAW4F,UAAWT,EACvB,CAAClG,IAAW4G,WAAWtE,EAAO6D,GAC5B7D,EAAM2D,WAAY,EAClB3D,EAAM9B,MAAQ,KACd8B,EAAMkE,MAAQL,EAAOC,OACvB,EACA,CAACzF,IAAQiG,WAAWtE,EAAO6D,GACzB7D,EAAM2D,WAAY,EAClB3D,EAAM9B,MAAQ,KACd8B,EAAMkE,MAAMK,KAAKV,EAAOC,QAC1B,EACA,CAACrF,IAAW6F,WAAWtE,EAAO6D,GAC5B7D,EAAM2D,WAAY,EAClB3D,EAAM9B,MAAQ,KACd,MAAMuF,EAAQzD,EAAMkE,MAAMM,WACxBC,GAAQA,EAAKC,KAAOb,EAAOC,QAAQY,KAErC1E,EAAMkE,MAAMS,OAAOlB,EAAO,EAC5B,EACA,CAAC/D,IAAO4E,WAAWtE,GACjBA,EAAMkE,MAAQ,GACdlE,EAAM9B,MAAQ,KACd8B,EAAM2D,WAAY,CACpB,KAImCiB,QCV1BC,EAjCKb,YAAY,CAC5B1C,KAAM,OACN2C,aATmB,CACnB9D,KAAM,CAAEmB,KAAM,KAAMwD,MAAO,MAC3B5F,MAAO,KACPe,YAAY,EACZI,cAAc,GAMd8D,cAAe,CACb,CAAC7E,IAASgF,WAAWtE,EAAO6D,GAC1B7D,EAAMG,KAAO0D,EAAOC,QAAQ3D,KAC5BH,EAAMd,MAAQ2E,EAAOC,QAAQ5E,MAC7Bc,EAAMC,YAAa,CACrB,EACA,CAACR,IAAM6E,WAAWtE,EAAO6D,GACvB7D,EAAMG,KAAO0D,EAAOC,QAAQ3D,KAC5BH,EAAMd,MAAQ2E,EAAOC,QAAQ5E,MAC7Bc,EAAMC,YAAa,CACrB,EACA,CAACP,IAAO4E,WAAWtE,GACjBA,EAAMG,KAAO,CAAEmB,KAAM,KAAMwD,MAAO,MAClC9E,EAAMd,MAAQ,KACdc,EAAMC,YAAa,CACrB,EACA,CAACN,IAAYyE,SAASpE,GACpBA,EAAMK,cAAe,CACvB,EACA,CAACV,IAAY2E,WAAWtE,EAAO6D,GAC7B7D,EAAMG,KAAO0D,EAAOC,QACpB9D,EAAMC,YAAa,EACnBD,EAAMK,cAAe,CACvB,EACA,CAACV,IAAY0E,UAAUrE,GACrBA,EAAMK,cAAe,CACvB,KAIiCuE,QC3B/BG,EAAoB,CACxBC,IAAK,OACLC,YACAC,UAAW,CAAC,UAGDC,EAAQC,YAAe,CAClCR,QAAS,CACP9E,KAAMuF,YAAeN,EAAmBF,GACxCS,MAAOvB,GAETwB,WAAYC,GACVA,EAAqB,CACnBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,QAGhEC,UAAUC,IAGCC,EAAYC,YAAajB,G,YC1BtCkB,IAASC,WAAWC,SAASC,eAAe,SAASC,OACnD9F,cAAC+F,IAAMC,WAAU,CAAAjG,SACfC,cAACiG,IAAQ,CAACzB,MAAOA,EAAMzE,SACrBC,cAACkG,IAAW,CAACC,QAAS,KAAMX,UAAWA,EAAUzF,SAC/CC,cAACoG,IAAa,CAAArG,SACZC,cAACwC,EAAG,Y","file":"static/js/main.eea411ea.chunk.js","sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// GET @ /tasks\nexport const fetchTasks = createAsyncThunk(\n  'tasks/fetchAll',\n  async (_, thunkAPI) => {\n    try {\n      const res = await axios.get('/tasks');\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\n// POST @ /tasks\nexport const addTask = createAsyncThunk(\n  'tasks/addTask',\n  async (text, thunkAPI) => {\n    try {\n      const response = await axios.post('/tasks', { text });\n      return response.data;\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.message);\n    }\n  }\n);\n\n// DELETE @ /tasks/:id\nexport const deleteTask = createAsyncThunk(\n  'tasks/deleteTask',\n  async (taskId, thunkAPI) => {\n    try {\n      const response = await axios.delete(`/tasks/${taskId}`);\n      return response.data;\n    } catch (e) {\n      return thunkAPI.rejectWithValue(e.message);\n    }\n  }\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Navigation_link__12o2K\",\"active\":\"Navigation_active__1Sofg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"UserMenu_wrapper__3KSXQ\",\"username\":\"UserMenu_username__2nvIz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"AuthNav_link__2ejsg\",\"active\":\"AuthNav_active__2WI0M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__1Yk8v\"};","import axios from 'axios';\nimport { createAsyncThunk } from '@reduxjs/toolkit';\n\naxios.defaults.baseURL = 'https://goit-task-manager.herokuapp.com/';\n\n// Utility to add JWT\nconst setAuthHeader = token => {\n  axios.defaults.headers.common.Authorization = `Bearer ${token}`;\n};\n\n// Utility to remove JWT\nconst clearAuthHeader = () => {\n  axios.defaults.headers.common.Authorization = '';\n};\n\n/*\n * POST @ /users/signup\n * body: { name, email, password }\n */\nexport const register = createAsyncThunk(\n  'auth/register',\n  async (credentials, thunkAPI) => {\n    try {\n      const res = await axios.post('/users/signup', credentials);\n      // After successful registration, add the token to the HTTP header\n      setAuthHeader(res.data.token);\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\n/*\n * POST @ /users/login\n * body: { email, password }\n */\nexport const logIn = createAsyncThunk(\n  'auth/login',\n  async (credentials, thunkAPI) => {\n    try {\n      const res = await axios.post('/users/login', credentials);\n      // After successful login, add the token to the HTTP header\n      setAuthHeader(res.data.token);\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n\n/*\n * POST @ /users/logout\n * headers: Authorization: Bearer token\n */\nexport const logOut = createAsyncThunk('auth/logout', async (_, thunkAPI) => {\n  try {\n    await axios.post('/users/logout');\n    // After a successful logout, remove the token from the HTTP header\n    clearAuthHeader();\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\n\n/*\n * GET @ /users/current\n * headers: Authorization: Bearer token\n */\nexport const refreshUser = createAsyncThunk(\n  'auth/refresh',\n  async (_, thunkAPI) => {\n    // Reading the token from the state via getState()\n    const state = thunkAPI.getState();\n    const persistedToken = state.auth.token;\n\n    if (persistedToken === null) {\n      // If there is no token, exit without performing any request\n      return thunkAPI.rejectWithValue('Unable to fetch user');\n    }\n\n    try {\n      // If there is a token, add it to the HTTP header and perform the request\n      setAuthHeader(persistedToken);\n      const res = await axios.get('/users/me');\n      return res.data;\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  }\n);\n","export const selectIsLoggedIn = state => state.auth.isLoggedIn;\n\nexport const selectUser = state => state.auth.user;\n\nexport const selectIsRefreshing = state => state.auth.isRefreshing;\n","import { useSelector } from 'react-redux';\nimport {\n  selectUser,\n  selectIsLoggedIn,\n  selectIsRefreshing,\n} from 'redux/auth/selectors';\n\nexport const useAuth = () => {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  const isRefreshing = useSelector(selectIsRefreshing);\n  const user = useSelector(selectUser);\n\n  return {\n    isLoggedIn,\n    isRefreshing,\n    user,\n  };\n};\n","import { NavLink } from 'react-router-dom';\nimport { useAuth } from 'hooks';\nimport css from './Navigation.module.css';\n\nexport const Navigation = () => {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <nav>\n      <NavLink className={css.link} to=\"/\">\n        Home\n      </NavLink>\n      {isLoggedIn && (\n        <NavLink className={css.link} to=\"/tasks\">\n          Tasks\n        </NavLink>\n      )}\n    </nav>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { logOut } from 'redux/auth/operations';\nimport { useAuth } from 'hooks';\nimport css from './UserMenu.module.css';\n\nexport const UserMenu = () => {\n  const dispatch = useDispatch();\n  const { user } = useAuth();\n\n  return (\n    <div className={css.wrapper}>\n      <p className={css.username}>Welcome, {user.name}</p>\n      <button type=\"button\" onClick={() => dispatch(logOut())}>\n        Logout\n      </button>\n    </div>\n  );\n};\n","import { NavLink } from 'react-router-dom';\nimport css from './AuthNav.module.css';\n\nexport const AuthNav = () => {\n  return (\n    <div>\n      <NavLink className={css.link} to=\"/register\">\n        Register\n      </NavLink>\n      <NavLink className={css.link} to=\"/login\">\n        Log In\n      </NavLink>\n    </div>\n  );\n};\n","import { Navigation } from '../Navigation/Navigation';\nimport { UserMenu } from '../UserMenu/UserMenu';\nimport { AuthNav } from '../AuthNav/AuthNav';\nimport { useAuth } from 'hooks';\nimport css from './AppBar.module.css';\n\nexport const AppBar = () => {\n  const { isLoggedIn } = useAuth();\n\n  return (\n    <header className={css.header}>\n      <Navigation />\n      {isLoggedIn ? <UserMenu /> : <AuthNav />}\n    </header>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Toaster } from 'react-hot-toast';\nimport { AppBar } from './AppBar/AppBar';\nimport { Suspense } from 'react';\n\nexport const Layout = () => {\n  return (\n    <div style={{ maxWidth: 960, margin: '0 auto', padding: '0 16px' }}>\n      <AppBar />\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n      <Toaster position=\"top-right\" reverseOrder={false} />\n    </div>\n  );\n};\n","import { Navigate } from 'react-router-dom';\nimport { useAuth } from 'hooks';\n\n/**\n * - If the route is private and the user is logged in, render the component\n * - Otherwise render <Navigate> to redirectTo\n */\n\nexport const PrivateRoute = ({ component: Component, redirectTo = '/' }) => {\n  const { isLoggedIn, isRefreshing } = useAuth();\n  const shouldRedirect = !isLoggedIn && !isRefreshing;\n\n  return shouldRedirect ? <Navigate to={redirectTo} /> : Component;\n};\n","import { useAuth } from 'hooks';\nimport { Navigate } from 'react-router-dom';\n\n/**\n * - If the route is restricted and the user is logged in, render a <Navigate> to redirectTo\n * - Otherwise render the component\n */\n\nexport const RestrictedRoute = ({ component: Component, redirectTo = '/' }) => {\n  const { isLoggedIn } = useAuth();\n\n  return isLoggedIn ? <Navigate to={redirectTo} /> : Component;\n};\n","import { useEffect, lazy } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Routes } from 'react-router-dom';\nimport { Layout } from './Layout';\nimport { PrivateRoute } from './PrivateRoute';\nimport { RestrictedRoute } from './RestrictedRoute';\nimport { refreshUser } from 'redux/auth/operations';\nimport { useAuth } from 'hooks';\n\nconst HomePage = lazy(() => import('../pages/Home'));\nconst RegisterPage = lazy(() => import('../pages/Register'));\nconst LoginPage = lazy(() => import('../pages/Login'));\nconst TasksPage = lazy(() => import('../pages/Tasks'));\n\n// 1. Регистрируюсь OK\n// 2. В ответе пришел ТОКЕН\n// 3. Токен пишем в Редакс\n// 4. Токен автоматически пишется в LS\n\n// 1. При каждом монтирвоании App, персист записывает значение токена из LS в Redux\n// 2. Если токена нет, ничего не делаем. Если токен есть, запускается операция refresh, isRefreshing ставится в true\n// 3. По результату рефреша, ставим isRefreshing false, при этом пишем данные в user и isLoggedIn true\n\n// 1. мы были залогинены и заходим на страницу tasks\n// 2. Персист кидает токен в редакс\n// 3. Запускается refresh, потом что есть токен, isRefreshing true\n// 4. Завершается запрос, успешно, isRefreshing false, isLoggedIn true\n// 5. Рендерятся Routes\n// 6. Для /tasks подходит <PrivateRoute redirectTo=\"/login\" component={<TasksPage />} />\n// 7. Приватный route принимает решение, мы залогинены? - ДА!\n// 8. Приватный route рендерит TasksPage\n\n// 1. Нажимаем Logout на странице /tasks, запускается операция logout, удаляется токен из хедера\n// 2. Логаут успешный, мы все еще на /tasks\n// 3. <PrivateRoute redirectTo=\"/login\" component={<TasksPage />} /> принимает решение\n// 4. Мы разлогинены, поэтому нас кидает на /login\n\nexport const App = () => {\n  const dispatch = useDispatch();\n  const { isRefreshing } = useAuth();\n\n  useEffect(() => {\n    dispatch(refreshUser());\n  }, [dispatch]);\n\n  return isRefreshing ? (\n    <b>Refreshing user...</b>\n  ) : (\n    <Routes>\n      <Route path=\"/\" element={<Layout />}>\n        <Route index element={<HomePage />} />\n        <Route\n          path=\"/register\"\n          element={\n            <RestrictedRoute redirectTo=\"/tasks\" component={<RegisterPage />} />\n          }\n        />\n        <Route\n          path=\"/login\"\n          element={\n            <RestrictedRoute redirectTo=\"/tasks\" component={<LoginPage />} />\n          }\n        />\n        <Route\n          path=\"/tasks\"\n          element={\n            <PrivateRoute redirectTo=\"/login\" component={<TasksPage />} />\n          }\n        />\n      </Route>\n    </Routes>\n  );\n};\n","import { createSlice } from '@reduxjs/toolkit';\nimport { logOut } from 'redux/auth/operations';\nimport { fetchTasks, addTask, deleteTask } from './operations';\n\nconst handlePending = state => {\n  state.isLoading = true;\n};\n\nconst handleRejected = (state, action) => {\n  state.isLoading = false;\n  state.error = action.payload;\n};\n\nconst tasksSlice = createSlice({\n  name: 'tasks',\n  initialState: {\n    items: [],\n    isLoading: false,\n    error: null,\n  },\n  extraReducers: {\n    [fetchTasks.pending]: handlePending,\n    [addTask.pending]: handlePending,\n    [deleteTask.pending]: handlePending,\n    [fetchTasks.rejected]: handleRejected,\n    [addTask.rejected]: handleRejected,\n    [deleteTask.rejected]: handleRejected,\n    [fetchTasks.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.items = action.payload;\n    },\n    [addTask.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      state.items.push(action.payload);\n    },\n    [deleteTask.fulfilled](state, action) {\n      state.isLoading = false;\n      state.error = null;\n      const index = state.items.findIndex(\n        task => task.id === action.payload.id\n      );\n      state.items.splice(index, 1);\n    },\n    [logOut.fulfilled](state) {\n      state.items = [];\n      state.error = null;\n      state.isLoading = false;\n    },\n  },\n});\n\nexport const tasksReducer = tasksSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nimport { register, logIn, logOut, refreshUser } from './operations';\n\nconst initialState = {\n  user: { name: null, email: null },\n  token: null,\n  isLoggedIn: false,\n  isRefreshing: false,\n};\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  extraReducers: {\n    [register.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n    [logIn.fulfilled](state, action) {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.isLoggedIn = true;\n    },\n    [logOut.fulfilled](state) {\n      state.user = { name: null, email: null };\n      state.token = null;\n      state.isLoggedIn = false;\n    },\n    [refreshUser.pending](state) {\n      state.isRefreshing = true;\n    },\n    [refreshUser.fulfilled](state, action) {\n      state.user = action.payload;\n      state.isLoggedIn = true;\n      state.isRefreshing = false;\n    },\n    [refreshUser.rejected](state) {\n      state.isRefreshing = false;\n    },\n  },\n});\n\nexport const authReducer = authSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { tasksReducer } from './tasks/slice';\nimport { authReducer } from './auth/slice';\n\n// Persisting token field from auth slice to localstorage\nconst authPersistConfig = {\n  key: 'auth',\n  storage,\n  whitelist: ['token'],\n};\n\nexport const store = configureStore({\n  reducer: {\n    auth: persistReducer(authPersistConfig, authReducer),\n    tasks: tasksReducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { App } from 'components/App';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport 'modern-normalize';\nimport './styles.css';\n\nReactDOM.createRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>\n);\n"],"sourceRoot":""}